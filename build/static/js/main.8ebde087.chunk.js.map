{"version":3,"sources":["views/visuals/Styles.tsx","hooks/useVideo.tsx","components/text/index.tsx","components/text/InfoText.tsx","components/zoomFragment/ZoomFragment.tsx","components/zoomFragment/index.tsx","components/fragments/Fragments.tsx","components/fragments/index.tsx","components/backgroundNodes/BackgroundNodes.tsx","components/backgroundNodes/index.tsx","components/effects/Effects.tsx","components/effects/index.tsx","components/backgroundPoints/BackgroundPoints.tsx","components/backgroundPoints/index.tsx","components/backgroundExtended/BackgroundExtended.tsx","components/backgroundExtended/index.tsx","components/title/index.tsx","components/title/Title.tsx","views/visuals/Visuals.tsx","views/visuals/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Background","styled","div","TextTitle","h1","useVideo","source","useState","map","thi","vid","document","createElement","src","url","crossOrigin","loop","muted","InfoText","news","pos","Html","position","radian_interval","Math","PI","videos","ZoomFragment","console","log","useEffect","play","positions","useMemo","Array","length","fill","_","i","cos","sin","index","key","rotation","args","attach","wrapS","ClampToEdgeWrapping","Fragments","forwardRef","ref","handleSelection","handleMouseHover","handleMouseOut","hover","blockHover","show","data","random","hoverValidation","Object","keys","d","dispose","onClick","onPointerOver","onPointerOut","shp","id","current","uuid","scale","THREE","useGLTF","preload","colArr","niceColors","floor","tempColor","BackgroundNodes","count","sizes","instMesh","useRef","positionsSet","colorArray","Float32Array","from","flatMap","set","toArray","useLayoutEffect","scratchObject3D","theta","x","y","push","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","castShadow","receiveShadow","size","attachObject","vertexColors","Line","points","color","lineWidth","Post","useThree","gl","scene","camera","smaa","useLoader","SMAAImageLoader","composer","EffectComposer","frameBufferType","HalfFloatType","addPass","RenderPass","SMAA","SMAAEffect","colorEdgesMaterial","setEdgeDetectionThreshold","normalPass","NormalPass","aOconfig","blendFunction","BlendFunction","MULTIPLY","samples","rings","distanceThreshold","distanceFalloff","rangeThreshold","rangeFalloff","luminanceInfluence","radius","intensity","bias","AO","SSAOEffect","renderTarget","texture","CAO","BLOOM","BloomEffect","opacity","SCREEN","kernelSize","luminanceThreshold","luminanceSmoothing","effectPass","EffectPass","renderToScreen","setSize","width","height","useFrame","delta","render","Effects","fallback","BackgroundPoints","abs","BackgroundExtended","Title","active","ratio","delay","strength","duration","mode","GlitchMode","SPORADIC","style","top","left","fontSize","Cover","imageURL","coverSelectSet","unfriendedMap","mesh","activeSet","hoverSet","props","useSpring","group","map-minFilter","transparent","side","DoubleSide","Shadow","Camera","PerspectiveCamera","fov","Scene","reset","mouse","vec","selection","selectionSet","showSet","blockHoverSet","coverSelect","fragRef","fragRefSet","createRef","phi","acos","lerp","input","Visuals","resetSet","antialias","alpha","onCreated","toneMapping","angle","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","App","className","zIndex","padding","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8ebde087.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Background = styled.div`\r\n  background-color: black;\r\n  display: flex;\r\n  height: 100vh;\r\n  width: 100vw;\r\n`;\r\n\r\nexport const TextTitle = styled.h1`\r\n  color: white;\r\n  font-size: xx-small;\r\n`;\r\n","import { useState } from 'react';\r\n\r\nconst useVideo = (source: { url: string }[]) => {\r\n  const [sourceArr] = useState(() =>\r\n    source.map((thi) => {\r\n      const vid = document.createElement('video');\r\n      vid.src = thi.url;\r\n      vid.crossOrigin = 'Anonymous';\r\n      vid.loop = true;\r\n      vid.muted = true;\r\n      return vid;\r\n    })\r\n  );\r\n  return sourceArr;\r\n};\r\n\r\n\r\nexport default useVideo;\r\n","import InfoText from './InfoText';\r\nexport default InfoText;\r\n","//@ts-nocheck\r\nimport React from 'react';\r\nimport { Html } from '@react-three/drei';\r\nimport { TextTitle } from '../../views/visuals/Styles';\r\n\r\nconst InfoText = ({ news, pos }) => {\r\n  return (\r\n    <Html position={pos}>\r\n      <TextTitle>{news}</TextTitle>\r\n    </Html>\r\n  );\r\n};\r\n\r\nexport default InfoText;\r\n","//@ts-nocheck\r\nimport React, { useMemo, useEffect } from 'react';\r\nimport useVideo from '../../hooks/useVideo'\r\nimport { MirroredRepeatWrapping, ClampToEdgeWrapping } from 'three'\r\nimport Title from '../title';\r\n\r\nconst radius = 200;\r\nconst radian_interval = (2 * Math.PI) / 10;\r\n\r\nconst videos: { url: string }[] = [{ url: 'videos/Second-Clip.mp4' }, { url: 'videos/Thrid-Clip.mp4' }]\r\n\r\nconst ZoomFragments = () => {\r\n  const vid = useVideo(videos);\r\n  console.log(vid);\r\n  useEffect(() => void vid[0].play(), [vid]);\r\n  useEffect(() => void vid[1].play(), [vid]);\r\n  const positions = useMemo(\r\n    () =>\r\n      new Array(vid.length)\r\n        .fill()\r\n        .map((_, i) => [\r\n          Math.cos(radian_interval * i) * radius,\r\n          Math.sin(radian_interval * i) * radius,\r\n          -400,\r\n        ]),\r\n    []\r\n  );\r\n  return (\r\n    <>\r\n      {positions.map((pos, index) => (\r\n        <mesh key={index} position={pos} rotation={[0, -10, 0]}>\r\n          <boxBufferGeometry key={index} args={[192, 108, 0]} />\r\n          <meshBasicMaterial>\r\n            <videoTexture\r\n              attach='map'\r\n              args={[vid[index] || [0]]}\r\n              wrapS={ClampToEdgeWrapping}\r\n            />\r\n          </meshBasicMaterial>\r\n        </mesh>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ZoomFragments;\r\n","import ZoomFragment from './ZoomFragment';\r\nexport default ZoomFragment;\r\n","//@ts-nocheck\r\nimport React, { useEffect, forwardRef, useMemo } from 'react';\r\nimport { useGLTF } from '@react-three/drei';\r\nimport * as THREE from 'three';\r\nimport useVideo from '../../hooks/useVideo';\r\nimport InfoText from '../text';\r\nimport ZoomFragment from '../../components/zoomFragment';\r\n\r\nconst videos: { url: string }[] = [{ url: 'videos/Main-Clip.mp4' }];\r\n\r\nconst Fragments = forwardRef(\r\n  (\r\n    {\r\n      handleSelection,\r\n      handleMouseHover,\r\n      handleMouseOut,\r\n      hover,\r\n      blockHover,\r\n      show,\r\n    },\r\n    ref\r\n  ) => {\r\n    const offset = 7;\r\n    const vid = useVideo(videos);\r\n    useEffect(() => void vid[0].play(), [vid]);\r\n    const data = useMemo(\r\n      () =>\r\n        new Array(1)\r\n          .fill()\r\n          .map(() => [\r\n            3 - (Math.random() * 100) / offset,\r\n            Math.random() * 4,\r\n            -50,\r\n          ]),\r\n      []\r\n    );\r\n    const hoverValidation = Object.keys(hover).length !== 0;\r\n    return (\r\n      <>\r\n        <group>\r\n          {data.map((d, index) => (\r\n            <group\r\n              ref={ref[index]}\r\n              key={index}\r\n              dispose={null}\r\n              position={d}\r\n              onClick={() => handleSelection(ref[index])}\r\n              onPointerOver={\r\n                blockHover ? () => handleMouseHover(ref[index]) : null\r\n              }\r\n              onPointerOut={\r\n                blockHover ? () => handleMouseOut(ref[index]) : null\r\n              }\r\n            >\r\n              {hoverValidation &&\r\n                hover.shp.id === ref[index].current.uuid &&\r\n                hover.shp.hover ? (\r\n                  <InfoText news={ref[index].current.uuid} />\r\n                ) : null}\r\n\r\n              <mesh scale={0.4}>\r\n                <boxBufferGeometry key={index} args={[19.2, 10.8, 10]} />\r\n                <meshBasicMaterial>\r\n                  <videoTexture\r\n                    attach='map'\r\n                    args={[vid[index] || [0]]}\r\n                    wrapS={THREE.MirroredRepeatWrapping}\r\n                  />\r\n                </meshBasicMaterial>\r\n              </mesh>\r\n            </group>\r\n          ))}\r\n          {show ? <ZoomFragment /> : null}\r\n        </group>\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nuseGLTF.preload('/main_shard.glb');\r\n\r\nexport default Fragments;\r\n","import Fragments from './Fragments';\r\nexport default Fragments;\r\n","//@ts-nocheck\r\nimport React, { useRef, useLayoutEffect, useMemo, useState } from 'react';\r\nimport * as THREE from 'three';\r\nimport { Line } from '@react-three/drei';\r\nimport niceColors from 'nice-color-palettes';\r\nimport InfoText from '../text';\r\n\r\nconst colArr = new Array(400)\r\n  .fill()\r\n  .map(() => niceColors[10][Math.floor(Math.random() * 5)]);\r\n\r\nconst tempColor = new THREE.Color();\r\n\r\nconst BackgroundNodes = ({ count = 200, sizes }) => {\r\n  const instMesh = useRef<THREE.Mesh>();\r\n  const [positions, positionsSet] = useState();\r\n  const colorArray = useMemo(\r\n    () =>\r\n      Float32Array.from(\r\n        new Array(400)\r\n          .fill()\r\n          .flatMap((_, i) => tempColor.set(colArr[i]).toArray())\r\n      ),\r\n    []\r\n  );\r\n\r\n  useLayoutEffect(() => {\r\n    const scratchObject3D = new THREE.Object3D();\r\n    const pos = [];\r\n    for (let i = 0; i < count; i++) {\r\n      const theta = 2 * Math.PI * Math.random();\r\n      const x = 10 * Math.random() * Math.cos(theta) * 1000;\r\n      const y = 5 * Math.random() * Math.sin(theta) * 10;\r\n      const z = -500;\r\n      pos.push(x, y, z);\r\n      scratchObject3D.position.set(x, y, z);\r\n      scratchObject3D.updateMatrix();\r\n      instMesh.current.setMatrixAt(i, scratchObject3D.matrix);\r\n      instMesh.current.instanceMatrix.needsUpdate = true;\r\n    }\r\n    positionsSet(pos);\r\n  }, [count]);\r\n\r\n  return (\r\n    <group >\r\n      <instancedMesh\r\n        ref={instMesh}\r\n        args={[null, null, count]}\r\n        castShadow\r\n        receiveShadow\r\n      >\r\n        {sizes.map((size, index) => (\r\n          <boxGeometry key={index} args={size}>\r\n            <instancedBufferAttribute\r\n              attachObject={['attributes', 'color']}\r\n              args={[colorArray, 3]}\r\n            />\r\n          </boxGeometry>\r\n        ))}\r\n        <meshPhongMaterial vertexColors={THREE.VertexColors} />\r\n      </instancedMesh>\r\n      {positions && positions.length !== 0 ? (\r\n        <Line points={positions} color='white' lineWidth={0.1} />\r\n      ) : null}\r\n\r\n    </group>\r\n  );\r\n};\r\n\r\nexport default BackgroundNodes;\r\n","import BackgroundNodes from './BackgroundNodes';\r\nexport default BackgroundNodes;\r\n","//@ts-nocheck\r\nimport React, { Suspense, useMemo, useEffect } from 'react';\r\nimport { useLoader, useThree, useFrame } from '@react-three/fiber';\r\nimport {\r\n  SMAAImageLoader,\r\n  BlendFunction,\r\n  EffectComposer,\r\n  EffectPass,\r\n  RenderPass,\r\n  SMAAEffect,\r\n  SSAOEffect,\r\n  NormalPass,\r\n  BloomEffect,\r\n} from 'postprocessing';\r\nimport { HalfFloatType } from 'three';\r\n\r\nfunction Post() {\r\n  const { gl, scene, camera, size } = useThree();\r\n  const smaa = useLoader(SMAAImageLoader);\r\n  const composer = useMemo(() => {\r\n    const composer = new EffectComposer(gl, { frameBufferType: HalfFloatType });\r\n    composer.addPass(new RenderPass(scene, camera));\r\n    const SMAA = new SMAAEffect(...smaa);\r\n    SMAA.colorEdgesMaterial.setEdgeDetectionThreshold(0.1);\r\n    const normalPass = new NormalPass(scene, camera);\r\n    const aOconfig = {\r\n      blendFunction: BlendFunction.MULTIPLY,\r\n      samples: 3, // May get away with less samples\r\n      rings: 4, // Just make sure this isn't a multiple of samples\r\n      distanceThreshold: 0.4,\r\n      distanceFalloff: 0.5,\r\n      rangeThreshold: 0.5, // Controls sensitivity based on camera view distance **\r\n      rangeFalloff: 0.01,\r\n      luminanceInfluence: 0.6,\r\n      radius: 2, // Spread range\r\n      intensity: 5,\r\n      bias: 0.5,\r\n    };\r\n    const AO = new SSAOEffect(\r\n      camera,\r\n      normalPass.renderTarget.texture,\r\n      aOconfig\r\n    );\r\n    const CAO = new SSAOEffect(camera, normalPass.renderTarget.texture, {\r\n      ...aOconfig,\r\n      samples: 21,\r\n      radius: 7,\r\n      intensity: 30,\r\n      luminanceInfluence: 0.6,\r\n      // new in postprocessing@6.16.0\r\n      color: 'red',\r\n    });\r\n    const BLOOM = new BloomEffect({\r\n      opacity: 1,\r\n      blendFunction: BlendFunction.SCREEN,\r\n      kernelSize: 2,\r\n      luminanceThreshold: 0.8,\r\n      luminanceSmoothing: 0.0,\r\n    });\r\n    const effectPass = new EffectPass(camera, SMAA, CAO, AO, BLOOM);\r\n    effectPass.renderToScreen = true;\r\n    composer.addPass(normalPass);\r\n    composer.addPass(effectPass);\r\n    return composer;\r\n  }, []);\r\n\r\n  useEffect(() => void composer.setSize(size.width, size.height), [size]);\r\n  return useFrame((_, delta) => composer.render(delta), 1);\r\n}\r\n\r\nexport default function Effect() {\r\n  return (\r\n    <Suspense fallback={null}>\r\n      <Post />\r\n    </Suspense>\r\n  );\r\n}\r\n","import Effects from './Effects';\r\nexport default Effects;\r\n","//@ts-nocheck\r\nimport React, { useRef, useEffect, useMemo } from 'react';\r\nimport * as THREE from 'three';\r\nimport niceColors from 'nice-color-palettes';\r\n\r\nconst colArr = new Array(400)\r\n  .fill()\r\n  .map(() => niceColors[10][Math.floor(Math.random() * 5)]);\r\n\r\nconst tempColor = new THREE.Color();\r\n\r\nconst BackgroundPoints = ({ count = 200 }) => {\r\n  const instMesh = useRef<THREE.Mesh>();\r\n  const colorArray = useMemo(\r\n    () =>\r\n      Float32Array.from(\r\n        new Array(count)\r\n          .fill()\r\n          .flatMap((_, i) => tempColor.set(colArr[i]).toArray())\r\n      ),\r\n    []\r\n  );\r\n  const sizes = useMemo(() => {\r\n    const r = 40;\r\n    const theta = 2 * Math.PI;\r\n    return new Array(count)\r\n      .fill()\r\n      .map(() => [\r\n        50,\r\n        2,\r\n        Math.abs(r * Math.sin(theta) * Math.random() * 20) / 10,\r\n      ]);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const scratchObject3D = new THREE.Object3D();\r\n    for (let i = 0; i < count; i++) {\r\n      const theta = 2 * Math.PI * Math.random();\r\n      const x = 10 * Math.random() * Math.cos(theta) * 1000;\r\n      const y = 5 * Math.random() * Math.sin(theta) * 10;\r\n      const z = -500;\r\n      scratchObject3D.position.set(x, y, z);\r\n      scratchObject3D.updateMatrix();\r\n      instMesh.current.setMatrixAt(i, scratchObject3D.matrix);\r\n      instMesh.current.instanceMatrix.needsUpdate = true;\r\n    }\r\n  }, [count]);\r\n  return (\r\n    <instancedMesh\r\n      ref={instMesh}\r\n      args={[null, null, count]}\r\n      castShadow\r\n      receiveShadow\r\n    >\r\n      {sizes.map((size, index) => (\r\n        <boxGeometry key={index} args={size}>\r\n          <instancedBufferAttribute\r\n            attachObject={['attributes', 'color']}\r\n            args={[colorArray, 3]}\r\n          />\r\n        </boxGeometry>\r\n      ))}\r\n      <meshPhongMaterial vertexColors={THREE.VertexColors} />\r\n    </instancedMesh>\r\n  );\r\n};\r\n\r\nexport default BackgroundPoints;\r\n","import BackgroundPoints from './BackgroundPoints';\r\nexport default BackgroundPoints;\r\n","//@ts-nocheck\r\nimport React, { useRef, useEffect, useMemo } from 'react';\r\nimport * as THREE from 'three';\r\nimport niceColors from 'nice-color-palettes';\r\n\r\nconst colArr = new Array(400)\r\n  .fill()\r\n  .map(() => niceColors[3][Math.floor(Math.random() * 5)]);\r\n\r\nconst tempColor = new THREE.Color();\r\n\r\nconst BackgroundExtended = ({ count = 100 }) => {\r\n\r\n  const instMesh = useRef<THREE.Mesh>();\r\n  console.log(instMesh);\r\n  const colorArray = useMemo(\r\n    () =>\r\n      Float32Array.from(\r\n        new Array(400)\r\n          .fill()\r\n          .flatMap((_, i) => tempColor.set(colArr[i]).toArray())\r\n      ),\r\n    []\r\n  );\r\n  const sizes = useMemo(() => {\r\n    const r = 40;\r\n    const theta = 2 * Math.PI;\r\n    return new Array(400)\r\n      .fill()\r\n      .map(() => [\r\n        50,\r\n        2,\r\n        Math.abs(r * Math.sin(theta) * Math.random() * 20) / 10,\r\n      ]);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const scratchObject3D = new THREE.Object3D();\r\n    for (let i = 0; i < count; i++) {\r\n      const theta = 2 * Math.PI * Math.random();\r\n      const x = 10 * Math.random() * Math.sin(theta) * 200;\r\n      const y = 5 * Math.random() * Math.cos(theta) * 100;\r\n      const z = -1000;\r\n      scratchObject3D.position.set(x, y, z);\r\n      scratchObject3D.updateMatrix();\r\n      instMesh.current.setMatrixAt(i, scratchObject3D.matrix);\r\n      instMesh.current.instanceMatrix.needsUpdate = true;\r\n    }\r\n  }, [count]);\r\n  return (\r\n    <instancedMesh\r\n      ref={instMesh}\r\n      args={[null, null, count]}\r\n      castShadow\r\n      receiveShadow\r\n    >\r\n      {sizes.map((size, index) => (\r\n        <boxGeometry key={index} args={size}>\r\n          <instancedBufferAttribute\r\n            attachObject={['attributes', 'color']}\r\n            args={[colorArray, 3]}\r\n          />\r\n        </boxGeometry>\r\n      ))}\r\n      <meshPhongMaterial vertexColors={THREE.VertexColors} />\r\n    </instancedMesh>\r\n  );\r\n};\r\n\r\nexport default BackgroundExtended;\r\n","import BackgroundExtended from './BackgroundExtended';\r\nexport default BackgroundExtended;\r\n","import Title from './Title';\r\nexport default Title;\r\n","//@ts-nocheck\r\nimport React from 'react';\r\nimport { Html } from '@react-three/drei';\r\nimport { EffectComposer, Glitch } from '@react-three/postprocessing';\r\nimport {\r\n  GlitchMode\r\n} from 'postprocessing';\r\n\r\nconst Title = () => {\r\n  return (\r\n    <>\r\n      <EffectComposer>\r\n        <Glitch\r\n          active\r\n          ratio={0.05}\r\n          delay={[0.2, 10]}\r\n          strength={[0.03, 0.1]}\r\n          duration={[0.2, 0.3]}\r\n          mode={GlitchMode.SPORADIC}\r\n        />\r\n      </EffectComposer>\r\n\r\n      <Html style={{ color: 'white', top: 0, left: 0 }}>\r\n        <h1>Noise</h1>\r\n        <p style={{ fontSize: '10px' }}>\r\n          Noise is a three js app looking at the removal of narrative techniques\r\n          within new articles. A combination of the chaotic nature and noise\r\n          that surrounds news daily\r\n        </p>\r\n      </Html>\r\n\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","//@ts-nocheck\r\n\r\nimport React, {\r\n  Suspense,\r\n  useState,\r\n  useRef,\r\n  useEffect,\r\n  useCallback,\r\n  createRef,\r\n  useMemo,\r\n} from 'react';\r\nimport * as THREE from 'three';\r\nimport { Canvas, useLoader, useFrame } from '@react-three/fiber';\r\nimport {\r\n  Shadow,\r\n  OrbitControls,\r\n  useHelper,\r\n  PerspectiveCamera,\r\n} from '@react-three/drei';\r\nimport { animated as a, useSpring } from '@react-spring/three';\r\nimport { VisualTypes } from './VisualTypes';\r\nimport { DoubleSide } from 'three';\r\nimport { Background } from './Styles';\r\nimport Fragments from '../../components/fragments';\r\nimport UI from '../ui';\r\nimport BackgroundNodes from '../../components/backgroundNodes';\r\nimport Effects from '../../components/effects';\r\nimport BackgroundPoints from '../../components/backgroundPoints';\r\nimport BackgroundExtended from '../../components/backgroundExtended';\r\nimport ZoomFragment from '../../components/zoomFragment';\r\nimport Title from '../../components/title';\r\nimport InfoText from '../../components/text'\r\n\r\nconst Cover = ({\r\n  imageURL,\r\n  position,\r\n  coverSelectSet,\r\n}: VisualTypes): JSX.Element => {\r\n  const [unfriendedMap] = useLoader(THREE.TextureLoader, [imageURL]);\r\n  const mesh = useRef<THREE.Mesh>(null!);\r\n  const [active, activeSet] = useState(false);\r\n  const [hover, hoverSet] = useState(false);\r\n  const props = useSpring({ scale: hover ? 1.5 : 1 });\r\n  useEffect(() => {\r\n    coverSelectSet(active);\r\n  }, [active]);\r\n  return (\r\n    <>\r\n      <a.group\r\n        {...props}\r\n        position={position}\r\n        onClick={() => activeSet(!active)}\r\n        onPointerOver={() => hoverSet(true)}\r\n        onPointerOut={() => hoverSet(false)}\r\n      >\r\n        <mesh scale={1} ref={mesh}>\r\n          <planeGeometry args={[2.7, 3.54, 32, 32]} />\r\n          <meshStandardMaterial\r\n            color={'white'}\r\n            map={unfriendedMap}\r\n            map-minFilter={THREE.LinearFilter}\r\n            transparent\r\n            opacity={1}\r\n            side={DoubleSide}\r\n          />\r\n        </mesh>\r\n\r\n        <Shadow\r\n          scale={[2.7 * 1.2, 1, 1]}\r\n          rotation={[0.75, 0, 0]}\r\n          position={[0, -2.5, 0]}\r\n          opacity={0.3}\r\n        />\r\n      </a.group>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Camera = () => {\r\n  const camera = useRef();\r\n  // useHelper(camera, THREE.CameraHelper, 1, 'cyan');\r\n  return (\r\n    <PerspectiveCamera\r\n      fov={75}\r\n      position={[0, 0, 50]}\r\n      ref={camera}\r\n    >\r\n      <meshBasicMaterial />\r\n    </PerspectiveCamera>\r\n  );\r\n};\r\n\r\nconst Scene = ({ reset, mouse }): JSX.Element => {\r\n  const vec = new THREE.Vector3();\r\n  const [selection, selectionSet] = useState();\r\n  const [show, showSet] = useState(false);\r\n  const [hover, hoverSet] = useState({});\r\n  const [blockHover, blockHoverSet] = useState(true);\r\n  const [coverSelect, coverSelectSet] = useState(false);\r\n  useEffect(() => {\r\n    if (selection) {\r\n      hoverSet(false);\r\n      blockHoverSet(false);\r\n    }\r\n  }, [selection]);\r\n\r\n  const handleSelection = (input) => {\r\n    selectionSet(input);\r\n    showSet(!show);\r\n  };\r\n  const handleMouseHover = (input) => {\r\n    hoverSet({ shp: { id: input.current.uuid, hover: true } });\r\n  };\r\n  const handleMouseOut = (input) => {\r\n    hoverSet({ shp: { id: input.current.uuid, hover: false } });\r\n  };\r\n  const focus = -30;\r\n  const [fragRef, fragRefSet] = useState([]);\r\n  useEffect(() => {\r\n    fragRefSet((fragRef) =>\r\n      Array(50)\r\n        .fill()\r\n        .map((_, i) => fragRef[i] || createRef())\r\n    );\r\n  }, []);\r\n  const sizes = useMemo(() => {\r\n    const r = 40;\r\n    const theta = 2 * Math.PI * Math.random();\r\n    const phi = Math.acos(2 * Math.random() - 1);\r\n    return new Array(400)\r\n      .fill()\r\n      .map(() => [\r\n        Math.abs(\r\n          r * Math.cos(theta) * Math.sin(phi) +\r\n          (-20 + Math.random() * 40) / 1000\r\n        ),\r\n        Math.abs(\r\n          r * Math.sin(theta) * Math.sin(phi) +\r\n          (-20 + Math.random() * 40) / 2000\r\n        ),\r\n        Math.abs(r * Math.sin(theta) * Math.random() * 20) / 10,\r\n      ]);\r\n  }, []);\r\n  useFrame(({ camera }) => {\r\n    reset\r\n      ? camera.position.lerp(vec.set(0, 0, 0), 0.1)\r\n      : camera.position.lerp(\r\n        vec.set(\r\n          selection ? selection.current.position.x : 0,\r\n          selection ? selection.current.position.y : 0,\r\n          selection ? focus : 0\r\n        ),\r\n        0.1\r\n      );\r\n  });\r\n  return (\r\n    <>\r\n      <Suspense fallback={null}>\r\n        <Camera />\r\n        <BackgroundExtended mouse={mouse} />\r\n\r\n        {coverSelect ? (\r\n          <group>\r\n            <Fragments\r\n              ref={fragRef}\r\n              handleSelection={handleSelection}\r\n              handleMouseHover={handleMouseHover}\r\n              handleMouseOut={handleMouseOut}\r\n              hover={hover}\r\n              blockHover={blockHover}\r\n              show={show}\r\n            />\r\n            <BackgroundNodes sizes={sizes} />\r\n            <BackgroundPoints />\r\n          </group>\r\n        ) : (\r\n            <group position={[0, 0, 0]}>\r\n              <Cover\r\n                imageURL={'Palestine-Israel.png'}\r\n                position={[0, 0, -5]}\r\n                coverSelectSet={coverSelectSet}\r\n              />\r\n              <Title />\r\n\r\n            </group>\r\n          )}\r\n\r\n      </Suspense>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Visuals = (): JSX.Element => {\r\n  const [reset, resetSet] = useState(false);\r\n  return (\r\n    <Background>\r\n      <Canvas\r\n        gl={{ antialias: true, alpha: true }}\r\n        onCreated={({ gl }) => {\r\n          gl.toneMapping = THREE.LinearToneMapping;\r\n        }}\r\n      >\r\n        {/* <fog attach='fog' args={['teal', 25, 1000]} /> */}\r\n        <color attach='background' args={['black']} />\r\n        <directionalLight\r\n          position={[50, 50, 25]}\r\n          angle={0.3}\r\n          intensity={2}\r\n          castShadow\r\n          shadow-mapSize-width={64}\r\n          shadow-mapSize-height={64}\r\n          shadow-camera-left={-10}\r\n          shadow-camera-right={10}\r\n          shadow-camera-top={10}\r\n          shadow-camera-bottom={-10}\r\n        />\r\n        <directionalLight position={[-10, -10, -5]} intensity={0.5} />\r\n        {/* <pointLight intensity={1} color='orange' decay={2} /> */}\r\n        <Scene position={[0, 0, 20]} reset={reset} resetSet={resetSet} />\r\n        <Effects />\r\n      </Canvas>\r\n    </Background>\r\n  );\r\n};\r\n\r\nexport default Visuals;\r\n","import Visuals from './Visuals';\r\nexport default Visuals;\r\n","import React from 'react';\r\nimport Visuals from './views/visuals';\r\nconst App = (): JSX.Element => {\r\n  return (\r\n    <div className='App'>\r\n      <p style={{ position: \"absolute\", color: 'white', zIndex: 2, padding: '50px', fontSize: '10px' }}>Click the cover to start</p>\r\n      <Visuals />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}